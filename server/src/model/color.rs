#[derive(Copy, Clone)]
pub struct RGBA(pub u8, pub u8, pub u8, pub u8);

// TODO: deal with this later.
// pub const PALETTE_SEGMENTS: [std::ops::Range<u8>; 8] = [
//     0..16,  // legacy
//     16..28, // darkest shades
//     28..40,
//     40..52,
//     52..64, // moose v1 default selected palette
//     64..76,
//     76..88,  // lightest shades
//     88..100, // black -> gray -> white -> transparent
// ];

pub const EXTENDED_COLORS: [RGBA; 100] = [
    // legacy mIRC colors
    RGBA(0xff, 0xff, 0xff, 0xff), // white     code 0
    RGBA(0x00, 0x00, 0x00, 0xff), // black     code 1
    RGBA(0x00, 0x00, 0x80, 0xff), // navy      code 2
    RGBA(0x00, 0x80, 0x00, 0xff), // green     code 3
    RGBA(0xff, 0x00, 0x00, 0xff), // red       code 4
    RGBA(0xa5, 0x2a, 0x2a, 0xff), // brown     code 5
    RGBA(0x80, 0x00, 0x80, 0xff), // purple    code 6
    RGBA(0x80, 0x80, 0x00, 0xff), // olive     code 7
    RGBA(0xff, 0xff, 0x00, 0xff), // yellow    code 8
    RGBA(0x00, 0xff, 0x00, 0xff), // lime      code 9
    RGBA(0x00, 0x80, 0x80, 0xff), // teal      code 10
    RGBA(0x00, 0xff, 0xff, 0xff), // cyan      code 11
    RGBA(0x00, 0x00, 0xff, 0xff), // blue      code 12
    RGBA(0xff, 0x00, 0xff, 0xff), // fuchsia   code 13
    RGBA(0x80, 0x80, 0x80, 0xff), // grey      code 14
    RGBA(0xd3, 0xd3, 0xd3, 0xff), // lightgrey code 15
    // extended mIRC Colors
    // darkest 1
    RGBA(0x47, 0x00, 0x00, 0xff), // code 16 0
    RGBA(0x47, 0x21, 0x00, 0xff), // code 17 1
    RGBA(0x47, 0x47, 0x00, 0xff), // code 18 2
    RGBA(0x32, 0x47, 0x00, 0xff), // code 19 3
    RGBA(0x00, 0x47, 0x00, 0xff), // code 20 4
    RGBA(0x00, 0x47, 0x2c, 0xff), // code 21 5
    RGBA(0x00, 0x47, 0x47, 0xff), // code 22 6
    RGBA(0x00, 0x27, 0x47, 0xff), // code 23 7
    RGBA(0x00, 0x00, 0x47, 0xff), // code 24 8
    RGBA(0x2e, 0x00, 0x47, 0xff), // code 25 9
    RGBA(0x47, 0x00, 0x47, 0xff), // code 26 a
    RGBA(0x47, 0x00, 0x2a, 0xff), // code 27 b
    // 2
    RGBA(0x74, 0x00, 0x00, 0xff), // code 28
    RGBA(0x74, 0x3a, 0x00, 0xff), // code 29
    RGBA(0x74, 0x74, 0x00, 0xff), // code 30
    RGBA(0x51, 0x74, 0x00, 0xff), // code 31
    RGBA(0x00, 0x74, 0x00, 0xff), // code 32
    RGBA(0x00, 0x74, 0x49, 0xff), // code 33
    RGBA(0x00, 0x74, 0x74, 0xff), // code 34
    RGBA(0x00, 0x40, 0x74, 0xff), // code 35
    RGBA(0x00, 0x00, 0x74, 0xff), // code 36
    RGBA(0x4b, 0x00, 0x74, 0xff), // code 37
    RGBA(0x74, 0x00, 0x74, 0xff), // code 38
    RGBA(0x74, 0x00, 0x45, 0xff), // code 39
    // 3
    RGBA(0xb5, 0x00, 0x00, 0xff), // code 40
    RGBA(0xb5, 0x63, 0x00, 0xff), // code 41
    RGBA(0xb5, 0xb5, 0x00, 0xff), // code 42
    RGBA(0x7d, 0xb5, 0x00, 0xff), // code 43
    RGBA(0x00, 0xb5, 0x00, 0xff), // code 44
    RGBA(0x00, 0xb5, 0x71, 0xff), // code 45
    RGBA(0x00, 0xb5, 0xb5, 0xff), // code 46
    RGBA(0x00, 0x63, 0xb5, 0xff), // code 47
    RGBA(0x00, 0x00, 0xb5, 0xff), // code 48
    RGBA(0x75, 0x00, 0xb5, 0xff), // code 49
    RGBA(0xb5, 0x00, 0xb5, 0xff), // code 50
    RGBA(0xb5, 0x00, 0x6b, 0xff), // code 51
    // 4 (default selected range)
    RGBA(0xff, 0x00, 0x00, 0xff), // code 52
    RGBA(0xff, 0x8c, 0x00, 0xff), // code 53
    RGBA(0xff, 0xff, 0x00, 0xff), // code 54
    RGBA(0xb2, 0xff, 0x00, 0xff), // code 55
    RGBA(0x00, 0xff, 0x00, 0xff), // code 56
    RGBA(0x00, 0xff, 0xa0, 0xff), // code 57
    RGBA(0x00, 0xff, 0xff, 0xff), // code 58
    RGBA(0x00, 0x8c, 0xff, 0xff), // code 59
    RGBA(0x00, 0x00, 0xff, 0xff), // code 60
    RGBA(0xa5, 0x00, 0xff, 0xff), // code 61
    RGBA(0xff, 0x00, 0xff, 0xff), // code 62
    RGBA(0xff, 0x00, 0x98, 0xff), // code 63
    // 5
    RGBA(0xff, 0x59, 0x59, 0xff), // code 64
    RGBA(0xff, 0xb4, 0x59, 0xff), // code 65
    RGBA(0xff, 0xff, 0x71, 0xff), // code 66
    RGBA(0xcf, 0xff, 0x60, 0xff), // code 67
    RGBA(0x6f, 0xff, 0x6f, 0xff), // code 68
    RGBA(0x65, 0xff, 0xc9, 0xff), // code 69
    RGBA(0x6d, 0xff, 0xff, 0xff), // code 70
    RGBA(0x59, 0xb4, 0xff, 0xff), // code 71
    RGBA(0x59, 0x59, 0xff, 0xff), // code 72
    RGBA(0xc4, 0x59, 0xff, 0xff), // code 73
    RGBA(0xff, 0x66, 0xff, 0xff), // code 74
    RGBA(0xff, 0x59, 0xbc, 0xff), // code 75
    // lightest 6
    RGBA(0xff, 0x9c, 0x9c, 0xff), // code 76
    RGBA(0xff, 0xd3, 0x9c, 0xff), // code 77
    RGBA(0xff, 0xff, 0x9c, 0xff), // code 78
    RGBA(0xe2, 0xff, 0x9c, 0xff), // code 79
    RGBA(0x9c, 0xff, 0x9c, 0xff), // code 80
    RGBA(0x9c, 0xff, 0xdb, 0xff), // code 81
    RGBA(0x9c, 0xff, 0xff, 0xff), // code 82
    RGBA(0x9c, 0xd3, 0xff, 0xff), // code 83
    RGBA(0x9c, 0x9c, 0xff, 0xff), // code 84
    RGBA(0xdc, 0x9c, 0xff, 0xff), // code 85
    RGBA(0xff, 0x9c, 0xff, 0xff), // code 86
    RGBA(0xff, 0x94, 0xd3, 0xff), // code 87
    // black to white, /w gray.
    RGBA(0x00, 0x00, 0x00, 0xff), // code 88 - blackest
    RGBA(0x13, 0x13, 0x13, 0xff), // code 89
    RGBA(0x28, 0x28, 0x28, 0xff), // code 90
    RGBA(0x36, 0x36, 0x36, 0xff), // code 91
    RGBA(0x4d, 0x4d, 0x4d, 0xff), // code 92
    RGBA(0x65, 0x65, 0x65, 0xff), // code 93
    RGBA(0x81, 0x81, 0x81, 0xff), // code 94
    RGBA(0x9f, 0x9f, 0x9f, 0xff), // code 95
    RGBA(0xbc, 0xbc, 0xbc, 0xff), // code 96
    RGBA(0xe2, 0xe2, 0xe2, 0xff), // code 97
    RGBA(0xff, 0xff, 0xff, 0xff), // code 98 - whitest
    RGBA(0x00, 0x00, 0x00, 0x00), // transparent (code 99)
];

pub const TRANSPARENT: u8 = 99u8;
pub const SHADE_TRNS: u8 = 0u8;
pub const COLOR_MAP_SIGIL: u8 = EXTENDED_COLORS.len() as u8;

/// Created with https://github.com/adedomin/moose/blob/master/bin/color-map-tool.js moose2
pub const SHADE_TO_EXTENDED: [u8; 119] = [
    TRANSPARENT,
    0,
    14,
    84,
    57,
    76,
    76,
    74,
    55,
    78,
    67,
    11,
    82,
    84,
    86,
    96,
    // was manually adjusted
    // is #fafafa, but color-diff wants to map it to something more like green/gray
    // 98 is white #fff, but that's the closest one as far as I can visually see.
    98,
    TRANSPARENT,
    0,
    92,
    72,
    43,
    64,
    64,
    74,
    42,
    66,
    80,
    11,
    70,
    72,
    74,
    95,
    97,
    TRANSPARENT,
    0,
    90,
    2,
    44,
    4,
    5,
    50,
    42,
    79,
    68,
    46,
    11,
    12,
    13,
    94,
    97,
    TRANSPARENT,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    TRANSPARENT,
    97,
    1,
    36,
    20,
    40,
    5,
    26,
    18,
    42,
    44,
    34,
    46,
    48,
    50,
    93,
    96,
    TRANSPARENT,
    97,
    1,
    36,
    20,
    40,
    28,
    26,
    18,
    42,
    44,
    22,
    46,
    2,
    50,
    93,
    96,
    TRANSPARENT,
    15,
    1,
    24,
    20,
    28,
    16,
    26,
    18,
    30,
    32,
    22,
    34,
    2,
    38,
    91,
    95,
];
